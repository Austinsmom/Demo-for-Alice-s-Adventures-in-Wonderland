<script src="js/jquery-2.0.2.js"></script>
<script src="js/underscore.js"></script>
<script src="js/timeline.js"></script>
<script>

function pin(el){
  var $el = $(el)
  $el.css({
    position: 'fixed',
    top: window.innerHeight - $el.height() + 'px',
    zIndex: 5
  })         
}

function unpin(el){
  var $el = $(el)
  
  if ($el.css('position') !== 'fixed')
    return
    
  $el.css({
    position: 'relative',
    top: 0,
    zIndex: 'auto'
  })
}

function animateOnce(el, className, cb){
  var eventName = 'webkitAnimationEnd'
  var cb = cb || function(){}
  var fn = function(){
    console.log('anim end')
    el.removeEventListener(eventName, fn)
    el.classList.remove(className)
    cb()
  }
  el.classList.add(className)
  el.addEventListener(eventName, fn)
}

scene1 = new Timeline

// opening scene action, text offset through rabbit hole
scene1.addAction(Action({
  el: document.querySelector('#scene1 p:first-of-type'),
  scene: $('#scene1'),
  maxHeight: document.querySelector('#scene1').offsetHeight,
  
  //  0 delay to force quick re-layout on text in shape-inside rabbit hole
  delay: 0,

  onEnter: function(){ 
    unpin(this.config.scene)
    
    console.log("Enter")
  },

  onProgress: function(e){
    var p = this.config.el
    var offsetMultiplier = 1.5  // TODO make multiplier factor of scroll distance from container height. Short screens need multiplier < 1.
    var newMargin = window.scrollY * offsetMultiplier;
    var oldMargin = parseInt(p.style.marginTop, 10) | 0
    var usedHeight = p.offsetHeight + p.offsetTop + (newMargin - oldMargin)

    var min = 0
    var max = min + window.innerHeight
    var current = window.innerHeight + window.scrollY
    var viewport = {
      start: window.scrollY,
      end: window.innerHeight + window.scrollY
    }
    // console.log(min, max, viewport.start, viewport.end)
  
    if (usedHeight < this.config.maxHeight) {
      p.style.marginTop = newMargin + "px"
    }
    
    
    if (window.scrollY >= this.config.scene.height() - window.innerHeight){
      this.exit()
    }
    else{
    }
  },

  onExit: function(e){
  }
}))

// transtion out scene 1 to scene 2
scene1.addAction(Action({
  el: document.querySelector('#trans'),
  delay: 0,

  onEnter: function(){
    console.log("Overlay Enter")
    pin('#scene1')
    this.config.el.classList.remove('hidden')
    this.initScroll = document.querySelector('#scene1').offsetHeight - window.innerHeight
  },

  onProgress: function(e){
    var el = this.config.el

    var opacity = Math.min((window.scrollY - this.initScroll) / 100, 1)
    el.style['opacity'] = opacity
    
    if (opacity <= 0 || opacity >= 1){
      this.exit()
    }
  },

  onExit: function(e){
    unpin('#scene1')
    
    if (!this.timeline.goingReverse){
      scrollTo(0, document.querySelector('#scene2_1').offsetTop)
    }
  }
}))


// transition in scene 2_1
scene1.addAction(Action({
  el: document.querySelector('#trans'),
  delay: 0,
  onEnter: function(){
    var instance = this 
    
    if (!this.timeline.goingReverse){
      animateOnce(this.config.el, 'anim-fade-out', function(){
        instance.exit()
      })
    }
    
    // var scene = document.querySelector('#scene2_1')
    // this.initScroll = scene.offsetHeight - window.innerHeight
  },

  onProgress: function(e){
    
    // if (window.scrollY <= )
    
    
    // var el = this.config.el
    // 
    // var opacity = Math.max((window.scrollY - this.initScroll) / 100, 1)
    // el.style['opacity'] = opacity
    // 
    // console.log(opacity)
    // if (opacity <= 0 || opacity >= 1){
    //   this.exit()
    // }
  },

  onExit: function(e){
    this.config.el.classList.add('hidden')
    this.config.el.removeAttribute('style')
    console.log("2_1 Exit")
  }
}))

// catch-all
scene1.addAction(Action({
  //  0 delay to force quick re-layout on text in shape-inside rabbit hole
  delay: 0,

  onEnter: function(){
  },

  onProgress: function(e){
    
    if (this.timeline.goingReverse){
      this.exit()
    }
  },

  onExit: function(e){
    console.log("catc-all Exit")
  }
}))


scene1.play()  
</script>